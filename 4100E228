{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of colab-github-demo.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/REMIEGIA/Remie-Gia-Venus-Pastor---Miss-M./blob/Miss-Evernight/4100E228\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-pVhOfzLx9us"
      },
      "source": [
        "# Using Google Colab with GitHub\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wKJ4bd5rt1wy"
      },
      "source": [
        "\n",
        "[Google Colaboratory](http://colab.research.google.com) is designed to integrate cleanly with GitHub, allowing both loading notebooks from github and saving notebooks to github."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K-NVg7RjyeTk"
      },
      "source": [
        "## Loading Public Notebooks Directly from GitHub\n",
        "\n",
        "Colab can load public github notebooks directly, with no required authorization step.\n",
        "\n",
        "For example, consider the notebook at this address: https://github.com/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb.\n",
        "\n",
        "The direct colab link to this notebook is: https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb.\n",
        "\n",
        "To generate such links in one click, you can use the [Open in Colab](https://chrome.google.com/webstore/detail/open-in-colab/iogfkhleblhcpcekbiedikdehleodpjo) Chrome extension."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WzIRIt9d2huC"
      },
      "source": [
        "## Browsing GitHub Repositories from Colab\n",
        "\n",
        "Colab also supports special URLs that link directly to a GitHub browser for any user/organization, repository, or branch. For example:\n",
        "\n",
        "- http://colab.research.google.com/github will give you a general github browser, where you can search for any github organization or username.\n",
        "- http://colab.research.google.com/github/googlecolab/ will open the repository browser for the ``googlecolab`` organization. Replace ``googlecolab`` with any other github org or user to see their repositories.\n",
        "- http://colab.research.google.com/github/googlecolab/colabtools/ will let you browse the main branch of the ``colabtools`` repository within the ``googlecolab`` organization. Substitute any user/org and repository to see its contents.\n",
        "- http://colab.research.google.com/github/googlecolab/colabtools/blob/master will let you browse ``master`` branch of the ``colabtools`` repository within the ``googlecolab`` organization. (don't forget the ``blob`` here!) You can specify any valid branch for any valid repository."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rmai0dD30XzL"
      },
      "source": [
        "## Loading Private Notebooks\n",
        "\n",
        "Loading a notebook from a private GitHub repository is possible, but requires an additional step to allow Colab to access your files.\n",
        "Do the following:\n",
        "\n",
        "1. Navigate to http://colab.research.google.com/github.\n",
        "2. Click the \"Include Private Repos\" checkbox.\n",
        "3. In the popup window, sign-in to your Github account and authorize Colab to read the private files.\n",
        "4. Your private repositories and notebooks will now be available via the github navigation pane."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8J3NBxtZpPcK"
      },
      "source": [
        "## Saving Notebooks To GitHub or Drive\n",
        "\n",
        "Any time you open a GitHub hosted notebook in Colab, it opens a new editable view of the notebook. You can run and modify the notebook without worrying about overwriting the source.\n",
        "\n",
        "If you would like to save your changes from within Colab, you can use the File menu to save the modified notebook either to Google Drive or back to GitHub. Choose **File→Save a copy in Drive** or **File→Save a copy to GitHub** and follow the resulting prompts. To save a Colab notebook to GitHub requires giving Colab permission to push the commit to your repository."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8QAWNjizy_3O"
      },
      "source": [
        "## Open In Colab Badge\n",
        "\n",
        "Anybody can open a copy of any github-hosted notebook within Colab. To make it easier to give people access to live views of GitHub-hosted notebooks,\n",
        "colab provides a [shields.io](http://shields.io/)-style badge, which appears as follows:\n",
        "\n",
        "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n",
        "\n",
        "The markdown for the above badge is the following:\n",
        "\n",
        "```markdown\n",
        "[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)\n",
        "```\n",
        "\n",
        "The HTML equivalent is:\n",
        "\n",
        "```HTML\n",
        "<a href=\"https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb\">\n",
        "  <img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/>\n",
        "</a>\n",
        "```\n",
        "\n",
        "Remember to replace the notebook URL in this template with the notebook you want to link to."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3VQqVi-3ScBC"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iUACOAT5AmuF"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1_nGJC7UAqFZ"
      },
      "source": [
        "#Arithmetic Operators\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sENXaFP_Auq2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dd358757-9694-40c4-ef5e-ff7d1d9c1428"
      },
      "source": [
        "a = 28 / 4\n",
        "a"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7.0"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EPDnkSiiAy4n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0bfc4088-934b-4abc-d152-b3d18cb1b24c"
      },
      "source": [
        "b = 28 // 4\n",
        "b"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fBLS52ftA-LL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "35b02570-e207-4f31-82a6-0a86499eb79d"
      },
      "source": [
        "c = 28 % 4\n",
        "c"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g6pTxMAeBEAi"
      },
      "source": [
        "#Logical Operators\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4FTTnRODBHay",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf5eb580-33f0-4474-9b86-259f560c0031"
      },
      "source": [
        "x = 5\n",
        "print(x > 3 and x < 7)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DCnnwqBvB-pf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a5a09cd5-55a7-46a9-cb02-fce493ac0632"
      },
      "source": [
        "x = 5\n",
        "print(x > 3 and x > 7)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-DaU4CPTCP5N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "232020f7-b29a-4587-8d14-e9d9ed0ee25f"
      },
      "source": [
        "x = 5\n",
        "print(x > 3 or x > 7)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "X_admX2_C_PX"
      },
      "source": [
        "#Built-in Functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "B1m2fHQRDGJv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af765fb1-c3b1-4bbe-a1c7-c6d4101aa7b2"
      },
      "source": [
        "abs(11)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "11"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bNu1BVd5EW4C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "7d8b599d-aadd-4c80-eaff-4b767debfb08"
      },
      "source": [
        "chr(25)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'\\x19'"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d0WbQCWeE2_y"
      },
      "source": [
        "#String Data Type"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u1wnSl81FMji",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "9ba08909-c52b-43ad-ed53-914409585301"
      },
      "source": [
        "str4 = 'I am very cute'\n",
        "str4"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'I am very cute'"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jpsnsKNiHwpU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a3d4bee6-bb96-462a-a712-6ad1a9119e9c"
      },
      "source": [
        "var1 = 'New World'\n",
        "print(\"var1[1]: \", var1[1])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "var1[1]:  e\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HIxRm9JgIWg0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5281a0bb-7152-416b-9613-971b6f28a2ea"
      },
      "source": [
        "b = \"Hello, LEYTE!\"\n",
        "print(a[:13])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello, LEYTE!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RHfrcwNnJV-P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "de09ed23-eed2-4307-a7f2-1b696b481cf6"
      },
      "source": [
        "txt = \"Yow, Pretty girls rock!\"\n",
        "x = txt.capitalize()\n",
        "print (x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Yow, pretty girls rock!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mt1ySKyyKZsB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8d4f8b3b-783d-4410-faf2-a0f06e6fa947"
      },
      "source": [
        "me = (\"Fourth Daughter\", \"Eighteen Years Old\")\n",
        "x = \"-\".join(me)\n",
        "print(x)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fourth Daughter-Eighteen Years Old\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "65C3E__vM6x5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39438271-17f4-4250-b471-bfd4580b87ed"
      },
      "source": [
        "txt = \"Shaina Magdayao\"\n",
        "x = txt.ljust(8)\n",
        "print(x, \"is my childhood idol.\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shaina Magdayao is my childhood idol.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "o4nqnaoPNdM1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e83fb7f-100e-46cb-e914-a38f905ea707"
      },
      "source": [
        "txt = \"Lai Kuan Lin\"\n",
        "x = txt.lstrip()\n",
        "print(\"My male idol is\", x, \", a taiwanese actor and an idol.\")\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My male idol is Lai Kuan Lin , a taiwanese actor and an idol.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xoHOP-sQOx43"
      },
      "source": [
        "#List Data Type"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1odhZl8NO14s",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4df2f393-81b5-4eb4-a4a7-bbbf5c83e5b3"
      },
      "source": [
        "list1 = [5, 3, 56, 98, 12, 39]\n",
        "list1[:6]"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[5, 3, 56, 98, 12, 39]"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PV-oakXiPh6z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d542c74f-eac1-4ca4-a0d0-f91cb862d175"
      },
      "source": [
        "list1 = [5, 3, 56, 98, 12, 39]\n",
        "max(list1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "98"
            ]
          },
          "metadata": {},
          "execution_count": 95
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9QXjdpn6P1lG"
      },
      "source": [
        "#Dict Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2UbK4NjKP6OS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a30864f-59ea-4ccc-8df8-e49f121be670"
      },
      "source": [
        "dict = {'Name': 'Miss M.', 'Age': 18, 'Class': 'A - High Quality'}\n",
        "print (\"dict['Name']: \", dict['Name'])\n",
        "print (\"dict['Age']: \", dict['Age'] )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict['Name']:  Miss M.\n",
            "dict['Age']:  18\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1Lx_G8bLR3IU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e6fb0afb-40d1-443e-de29-6ff44790cc1d"
      },
      "source": [
        "print (\"dict ['Class']\", dict ['Class'])"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dict ['Class'] A - High Quality\n"
          ]
        }
      ]
    }
  ]
}